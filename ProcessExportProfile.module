<?php

/**
 * Export site profiles
 *
 * ProcessWire 2.x 
 * Copyright (C) 2014 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://processwire.com
 *
 */

class ProcessExportProfile extends Process {

	public static function getModuleInfo() {
		return array(
			'title' => 'Export Site Profile', 
			'summary' => 'Create a site profile that can be used for a fresh install of ProcessWire.', 
			'version' => 200, 
			'icon' => 'save', 
			'page' => array(
				'name' => 'export-site-profile',
				'parent' => 'setup',
				),
			'requires' => 'ProcessWire>=2.4.14'
			);
	}

	/**
	 * Path that profile DB dump is exported to
	 *
	 */
	protected $exportPath;

	/**
	 * Name of /site/ dir (not a path or URL)
	 *
	 */
	protected $siteDir; 

	/**
	 * URL that profile DB dump is exported to
	 *
	 */
	protected $exportURL; 

	public function __construct() {
		$dir = 'backups/export-profile/';
		$this->exportPath = $this->config->paths->assets . $dir;
		$this->exportURL = $this->config->urls->assets . $dir;
	}

	public function init() {
		if(!$this->user->isSuperuser()) throw new WirePermissionException("This module requires superuser access"); 
		parent::init();
	}

	/**
	 * Ensure that everything is where we need it to be 
	 *
	 * Returns false if not. 
	 *
	 */
	protected function setup() {

		if(!is_dir($this->exportPath) && !wireMkdir($this->exportPath, true)) {
			$this->error("Before continuing, please create this directory and ensure that it is writable: $this->exportURL"); 
			return false;
		}

		if(!is_writable($this->exportPath)) {
			$this->error("Before continuing, please make this directory writable and remove any files already in it: $this->exportURL"); 
			return false;
		}	

		return true; 
	}

	protected function buildForm() {

		$form = $this->modules->get('InputfieldForm'); 

		$info = self::getModuleInfo();			
		$form->description = $info['summary'];

		$f = $this->modules->get('InputfieldName'); 
		$f->attr('name', 'profile_name');
		$f->label = $this->_('Name');
		$f->description = $this->_('This will be used as the directory name for the profile, i.e. "my-profile".');
		$f->required = true; 
		$form->add($f); 

		$f = $this->modules->get('InputfieldText'); 
		$f->attr('name', 'profile_title'); 
		$f->label = $this->_('Title'); 
		$f->description = $this->_('This is the human-readable title of the profile, i.e. "My Profile".'); 
		$f->required = true; 
		$form->add($f); 

		$f = $this->modules->get('InputfieldTextarea'); 
		$f->attr('name', 'profile_summary'); 
		$f->label = $this->_('Summary'); 
		$f->description = $this->_('A short description of this profile (1-sentence recommended).'); 
		$f->attr('rows', 3); 
		$form->add($f); 

		$f = $this->modules->get('InputfieldSubmit'); 
		$f->attr('name', 'submit_export'); 
		$f->attr('value', $this->_('Start Export')); 
		$form->add($f);

		return $form;
	}

	/**
	 * Present the instructions screen
	 *
	 */
	public function ___execute() {

		if(!$this->setup()) return; 
		$profileTime = $this->profileExists();

		if($profileTime) {
			$date = wireRelativeTimeStr($profileTime); 
			$out = "<p>An installation profile already exists in <u>{$this->exportURL}</u>, from $date. Before continuing please remove it.</p>" . 
				$this->button('./remove/', $this->_('Remove')); 
			return $out; 
		}

		$form = $this->buildForm();
		$note = "<p class='detail'>After clicking the button be patient as it may take some time to export the profile.</p>";

		if($this->input->post('submit_export')) {
			$out = $this->processInput($form);
			if($out) return $out; 
		}

		return $form->render() . $note;
	}

	protected function processInput($form) {

		$form->processInput($this->input->post);
		if($form->getErrors()) return false; 

		$dir = "site-" . $form->get('profile_name')->attr('value'); 
		$title = str_replace('"', ' ', $form->get('profile_title')->attr('value')); 
		$summary = str_replace('"', ' ', $form->get('profile_summary')->attr('value')); 
		$path = $this->exportPath . "$dir/";

		// setup skeleton directory
		if(!wireMkdir($path)) throw new WireException("Unable to create: $path");
		if(!wireCopy(dirname(__FILE__) . '/site-skel/', $path)) throw new WireException("Unable to setup skeleton site directory: $path"); 

		// write install/info.php file
		$fp = fopen($path . "install/info.php", "w"); 

		fwrite($fp, '<?php if(!defined("PROCESSWIRE_INSTALL")) die();' . "\n" . 
			'$info = array(' . 
			"\n\t'title' => \"$title\", " . 
			"\n\t'summary' => \"$summary\", " . 
			"\n\t'screenshot' => \"\"" . 
			"\n\t);\n");

		fclose($fp); 

		$dumpFile = $this->mysqldump("{$path}install/", false); 

		if(!$dumpFile) {
			$this->error("Error creating SQL dump file in {$path}install/"); 
			$session->redirect("./"); 
		}

		$form = $this->modules->get('InputfieldForm');
		$form->action = './copy/'; 
		$f = $this->modules->get('InputfieldHidden');
		$f->attr('name', 'profile_dir'); 
		$f->attr('value', $dir); 
		$form->add($f);

		$f = $this->modules->get('InputfieldSubmit');
		$f->attr('name', 'submit_copy'); 
		$f->attr('value', $this->_('Continue')); 
		$form->add($f); 
		
		$out =	"<h2>Your database has been exported.</h2>" . 
			"<p>The next step will copy all of your site's files. It will not make any changes to your current site.</p>" . 
			$form->render() . 
			"<p class='detail'>After clicking the button, be patient. If your site has a lot of files, this could take awhile.</p>"; 
			
		return $out; 
	}

	/**
	 * Remove existing profile
	 *
	 */
	public function ___executeRemove() { 

		if(wireRmdir($this->exportPath, true)) {
			$this->message("Removed existing profile in $this->exportURL"); 
			$this->session->redirect('../'); 
		} else {
			$this->error("Error removing $this->exportURL"); 
			return $this->button('../'); 
		}
	}

	/**
	 * Copy /site/assets/files/ to /site/install/files/ 
	 *
	 */
	public function ___executeCopy() {

		$dir = $this->sanitizer->name($this->input->post('profile_dir')); 
		if(!$dir) $this->session->redirect('../'); 

		set_time_limit(3600); 

		$paths = $this->config->paths; 
		$path = $this->exportPath . $dir . '/'; 
		$_path = str_replace($paths->root, '/', $path); 

		$copies = array(
			$paths->templates => $path . "templates/", 
			$paths->siteModules => $path . "modules/",
			$paths->files => $path . "install/files/"
			);

		$copyOptions = array('copyEmptyDirs' => false); 

		foreach($copies as $src => $dst) {
			$_src = str_replace($paths->root, '/', $src); 
			$_dst = str_replace($paths->root, '/', $dst); 
			if(wireCopy($src, $dst, $copyOptions)) $this->message("Copied $_src => $_dst"); 
				else $this->error("Error copying $_src => $_dst"); 
		}

		$this->message("The site profile has been exported! $_path"); 

		$out =	"<h2>Congratulations</h2>" . 
			"<p>Your site profile has been exported to this directory:</p>" . 
			"<pre>$_path</pre>" . 
			"<p>To use it, simply copy it to the root directory of a new uninstalled copy of ProcessWire in <u>/$dir/</u>. " . 
			"When the ProcessWire installer runs, it will detect this profile as an installation option. " . 
			"When you are done with the files here, you should remove them</a> to save space.</p>" . 
			$this->button('../remove/', $this->_('Remove Now')); 

		return $out; 
		
	}

	/**
	 * Create a mysql dump file
	 *
	 * @param string $path Path where dump file should be created
	 * @param bool $fullDump Perform a full dump of everything (default: false)
	 * @return string|bool Returns the created file on success or false on error
	 *
	 */
	public function mysqldump($path, $fullDump = false) {

		$config = $this->wire('config');
		$backup = new WireDatabaseBackup($path); 
		$backup->setDatabase($this->database); 
		$backup->setDatabaseConfig($config); 
		$options = array();

		if($fullDump) {
			$options['filename'] = 'install-full.sql';
			
		} else {

			// exclude this page
			$skipPageIDs = array($this->wire('page')->id);

			// exclude users
			foreach($this->wire('pages')->find("template=user, include=all") as $u) {
				if(in_array($u->id, array($config->guestUserPageID, $config->superUserPageID))) continue; 
				$skipPageIDs[] = $u->id; 
			}
			$skipPageIDs = implode(',', $skipPageIDs); 

			$options['filename'] = 'install.sql';

			// no create or data
			$options['excludeTables'] = array( // old PW20 tables
				'pages_drafts',
				'pages_roles',
				'permissions',
				'roles',
				'roles_permissions', 
				'users', 
				'users_roles', 
				'user',
				'role',
				'permission',
				);

			// create, but no data
			$options['excludeExportTables'] = array(
				'field_roles',
				'field_permissions',
				'field_email',
				'field_pass',
				'caches',
				'session_login_throttle',
				'page_path_history', 
				); 

			$options['whereSQL'] = array(
				'/^(field_.+|pages_access|pages_parents)$/' => array(
					"pages_id NOT IN($skipPageIDs)",
					),
				'pages' => array(
					"id NOT IN($skipPageIDs)", 
					),
				'pages_parents' => array(
					"parents_id NOT IN($skipPageIDs)", 
					"pages_id NOT IN($skipPageIDs)", 
					),
				'modules' => array(
					"id!=" . $this->wire('modules')->getModuleID($this), 
					),
				);

			$options['extraSQL'] = array(
				"UPDATE pages SET created_users_id=$config->superUserPageID, " . 
				"modified_users_id=$config->superuserPageID, created=NOW(), modified=NOW();", 
				);

		}

		$result = $backup->backup($options); 
		foreach($backup->errors() as $error) $this->error($error); 
		return $result; 
	}

	protected function profileExists() {

		if(is_dir($this->exportPath)) {
			$num = 0; 
			foreach(new DirectoryIterator($this->exportPath) as $file) {
				if($file->isDot()) continue; 
				$num++;
			}
			if($num) {
				// directory exists and has at least one file or dir in it
				$time = filemtime($this->exportPath); 
				return $time ? $time : time(); 
			}
		}

		return false;
	}

	protected function button($href, $label = '', $icon = 'angle-right') {
		if(empty($label)) $label = $this->_('Continue'); 
		$btn = $this->modules->get('InputfieldButton'); 
		$btn->href = $href; 
		$btn->icon = $icon; 
		$btn->value = $label;
		return $btn->render();
	}


}

